// Solver for thermal (Linear Transport-Diffusion equation)
macro LTD()
{
    solve thermal (T,v,init=i) =
        int2d(Th) (alpha*(T*v) + (dx(T)*dx(v) + dy(T)*dy(v)))
        - int2d(Th) (Qn*v)
        + int2d(Th) (-alpha*convect([up1,up2],-dt,Told)*v)
        + on(1,T=tbc1)
        + on(2,T=tbc2)
        + on(3,T=tbc3)
        + on(4,T=tbc4);
 } //EOM

// Solver for velocity (Navier-Stokes equation)
macro NS()
{
    solve velocity ([u1,u2,p],[v1,v2,q],init=i) =
        int2d(Th)(
            alpha*(u1*v1 + u2*v2)
            + Pr * (dx(u1)*dx(v1) + dy(u1)*dy(v1) + dx(u2)*dx(v2) + dy(u2)*dy(v2))
            - p*q*epsr
            - p*dx(v1) - p*dy(v2)
            - dx(u1)*q - dy(u2)*q
            )
        + int2d(Th) (-alpha*convect([up1,up2],-dt,up1)*v1 -alpha*convect([up1,up2],-dt,up2)*v2)
        - int2d(Th) (Ra * Pr * T * v2)
        + on(1,u1=vbc1x,u2=vbc1y)
        + on(2,u1=vbc2x,u2=vbc2y)
        + on(3,u1=vbc3x,u2=vbc3y)
        + on(4,u1=vbc4x,u2=vbc4y);
}//EOM

// Solver for streamlines
macro streamlines()
{
    solve strl(psi,phi) =
        int2d(Th)(dx(psi)*dx(phi) + dy(psi)*dy(phi))
        + int2d(Th)(-phi*(dy(u1)-dx(u2)))
        + on(1,2,3,4,psi=0);
}//EOM